var documenterSearchIndex = {"docs":
[{"location":"#BandedMatrices.jl-Documentation","page":"Home","title":"BandedMatrices.jl Documentation","text":"","category":"section"},{"location":"#Creating-banded-matrices","page":"Home","title":"Creating banded matrices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BandedMatrix","category":"page"},{"location":"#BandedMatrices.BandedMatrix","page":"Home","title":"BandedMatrices.BandedMatrix","text":"BandedMatrix{T}(undef, (n, m), (l, u))\n\nreturns an uninitialized n×m banded matrix of type T with bandwidths (l,u).\n\n\n\n\n\nBandedMatrix{T}(kv::Pair, (m,n), (l,u))\n\nConstruct a m × n BandedMatrix with bandwidths (l,u) from Pairs of diagonals and vectors. Vector kv.second will be placed on the kv.first diagonal.\n\n\n\n\n\nBandedMatrix(kv::Pair{<:Integer,<:AbstractVector}...)\n\nConstruct a square matrix from Pairs of diagonals and vectors. Vector kv.second will be placed on the kv.first diagonal.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"brand","category":"page"},{"location":"#BandedMatrices.brand","page":"Home","title":"BandedMatrices.brand","text":"brand(T,n,m,l,u)\n\nCreates an n×m banded matrix  with random numbers in the bandwidth of type T with bandwidths (l,u)\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"brandn","category":"page"},{"location":"#BandedMatrices.brandn","page":"Home","title":"BandedMatrices.brandn","text":"brandn(T,n,m,l,u)\n\nCreates an n×m banded matrix  with random normals in the bandwidth of type T with bandwidths (l,u)\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using BandedMatrices\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"To create a banded matrix of all zeros, identity matrix, or with a constant value use the following constructors:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> BandedMatrix(Zeros(5,5), (1,2))\n5×5 BandedMatrix{Float64} with bandwidths (1, 2):\n 0.0  0.0  0.0   ⋅    ⋅\n 0.0  0.0  0.0  0.0   ⋅\n  ⋅   0.0  0.0  0.0  0.0\n  ⋅    ⋅   0.0  0.0  0.0\n  ⋅    ⋅    ⋅   0.0  0.0\n\njulia> BandedMatrix(Eye(5), (1,2))\n5×5 BandedMatrix{Float64} with bandwidths (1, 2):\n 1.0  0.0  0.0   ⋅    ⋅\n 0.0  1.0  0.0  0.0   ⋅\n  ⋅   0.0  1.0  0.0  0.0\n  ⋅    ⋅   0.0  1.0  0.0\n  ⋅    ⋅    ⋅   0.0  1.0\n\njulia> BandedMatrix(Ones(5,5), (1,2))\n5×5 BandedMatrix{Float64} with bandwidths (1, 2):\n 1.0  1.0  1.0   ⋅    ⋅\n 1.0  1.0  1.0  1.0   ⋅\n  ⋅   1.0  1.0  1.0  1.0\n  ⋅    ⋅   1.0  1.0  1.0\n  ⋅    ⋅    ⋅   1.0  1.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"To create a banded matrix of a given size with constant bands (such as the classical finite difference approximation of the one-dimensional Laplacian on the unit interval [0,1]), you can use the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"n = 128\nh = 1/n\nA = BandedMatrix{Float64}(undef, (n,n), (1,1))\nA[band(0)] .= -2/h^2\nA[band(1)] .= A[band(-1)] .= 1/h^2","category":"page"},{"location":"","page":"Home","title":"Home","text":"Creating a large banded matrix from a dense matrix should be avoided because that costs time and memory:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @time BandedMatrix(ones(10000,10000),(0,0));\n0.775120 seconds (10 allocations: 763.016 MiB, 28.04% gc time)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Try to use structured matrices to get around this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @time BandedMatrix(Ones(10000,10000),(0,0));\n0.000074 seconds (9 allocations: 78.469 KiB)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Another example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @time BandedMatrix([Ones(10000,5000) Zeros(10000,5000)],(1,1));\n0.346918 seconds (22 allocations: 763.169 MiB, 8.38% gc time)\n\njulia> using LazyArrays\njulia> @time BandedMatrix(Hcat(Ones(10000,5000),Zeros(10000,5000)),(1,1));\n0.012627 seconds (30.01 k allocations: 1.374 MiB, 92.24% gc time)","category":"page"},{"location":"","page":"Home","title":"Home","text":"See LazyArrays, FillArrays for other implemented structured matrices.","category":"page"},{"location":"#Accessing-banded-matrices","page":"Home","title":"Accessing banded matrices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"bandwidths","category":"page"},{"location":"#BandedMatrices.bandwidths","page":"Home","title":"BandedMatrices.bandwidths","text":"bandwidths(A)\n\nReturns a tuple containing the lower and upper bandwidth of A, in order.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"bandwidth","category":"page"},{"location":"#BandedMatrices.bandwidth","page":"Home","title":"BandedMatrices.bandwidth","text":"bandwidth(A,i)\n\nReturns the lower bandwidth (i==1) or the upper bandwidth (i==2).\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"bandrange","category":"page"},{"location":"#BandedMatrices.bandrange","page":"Home","title":"BandedMatrices.bandrange","text":"bandrange(A)\n\nReturns the range -bandwidth(A,1):bandwidth(A,2).\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"band","category":"page"},{"location":"#BandedMatrices.band","page":"Home","title":"BandedMatrices.band","text":"band(i)\n\nRepresents the i-th band of a banded matrix.\n\njulia> using BandedMatrices\n\njulia> A = BandedMatrix(0=>1:4, 1=>5:7, -1=>8:10)\n4×4 BandedMatrix{Int64} with bandwidths (1, 1):\n 1  5   ⋅  ⋅\n 8  2   6  ⋅\n ⋅  9   3  7\n ⋅  ⋅  10  4\n\njulia> A[band(1)]\n3-element Vector{Int64}:\n 5\n 6\n 7\n\njulia> A[band(0)]\n4-element Vector{Int64}:\n 1\n 2\n 3\n 4\n\njulia> A[band(-1)]\n3-element Vector{Int64}:\n  8\n  9\n 10\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"BandRange","category":"page"},{"location":"#BandedMatrices.BandRange","page":"Home","title":"BandedMatrices.BandRange","text":"BandRange\n\nRepresents the entries in a row/column inside the bands.\n\njulia> using BandedMatrices\n\njulia> A = BandedMatrix(0=>1:4, 1=>5:7, -1=>8:10)\n4×4 BandedMatrix{Int64} with bandwidths (1, 1):\n 1  5   ⋅  ⋅\n 8  2   6  ⋅\n ⋅  9   3  7\n ⋅  ⋅  10  4\n\njulia> A[2, BandRange]\n3-element Vector{Int64}:\n 8\n 2\n 6\n\n\n\n\n\n","category":"constant"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.isbanded","category":"page"},{"location":"#BandedMatrices.isbanded","page":"Home","title":"BandedMatrices.isbanded","text":"isbanded(A)\n\nreturns true if a matrix implements the banded interface.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.BandSlice","category":"page"},{"location":"#BandedMatrices.BandSlice","page":"Home","title":"BandedMatrices.BandSlice","text":"BandSlice(band::Band, indices::StepRange{Int,Int}) <: OrdinalRange{Int,Int}\n\nRepresent a StepRange of indices corresponding to a band.\n\nUpon calling to_indices, Bands are converted to BandSlice objects to represent the indices over which the Band spans.\n\nThis mimics the relationship between Colon and Base.Slice.\n\nExample\n\njulia> B = BandedMatrix(0 => 1:4, 1=>1:3);\n\njulia> to_indices(B, (Band(1),))[1]\nBandSlice(Band(1), 5:5:15)\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.colstart","category":"page"},{"location":"#BandedMatrices.colstart","page":"Home","title":"BandedMatrices.colstart","text":"colstart(A, i::Integer)\n\nReturn the starting row index of the filled bands in the i-th column, bounded by the actual matrix size.\n\nExamples\n\njulia> A = BandedMatrix(0=>1:4, 1=>5:7)\n4×4 BandedMatrix{Int64} with bandwidths (0, 1):\n 1  5  ⋅  ⋅\n ⋅  2  6  ⋅\n ⋅  ⋅  3  7\n ⋅  ⋅  ⋅  4\n\njulia> BandedMatrices.colstart(A, 3)\n2\n\njulia> BandedMatrices.colstart(A, 4)\n3\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.colstop","category":"page"},{"location":"#BandedMatrices.colstop","page":"Home","title":"BandedMatrices.colstop","text":"colstop(A, i::Integer)\n\nReturn the stopping row index of the filled bands in the i-th column, bounded by the actual matrix size.\n\nExamples\n\njulia> A = BandedMatrix(0=>1:4, 1=>5:7)\n4×4 BandedMatrix{Int64} with bandwidths (0, 1):\n 1  5  ⋅  ⋅\n ⋅  2  6  ⋅\n ⋅  ⋅  3  7\n ⋅  ⋅  ⋅  4\n\njulia> BandedMatrices.colstop(A, 3)\n3\n\njulia> BandedMatrices.colstop(A, 4)\n4\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.colrange","category":"page"},{"location":"#BandedMatrices.colrange","page":"Home","title":"BandedMatrices.colrange","text":"colrange(A, i::Integer)\n\nReturn the range of rows in the i-th column that correspond to filled bands.\n\nExamples\n\njulia> A = BandedMatrix(0=>1:4, 1=>5:7)\n4×4 BandedMatrix{Int64} with bandwidths (0, 1):\n 1  5  ⋅  ⋅\n ⋅  2  6  ⋅\n ⋅  ⋅  3  7\n ⋅  ⋅  ⋅  4\n\njulia> colrange(A, 1)\n1:1\n\njulia> colrange(A, 3)\n2:3\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.collength","category":"page"},{"location":"#BandedMatrices.collength","page":"Home","title":"BandedMatrices.collength","text":"collength(A, i::Integer)\n\nReturn the number of filled bands in the i-th column.\n\nExamples\n\njulia> A = BandedMatrix(0=>1:4, 1=>5:7)\n4×4 BandedMatrix{Int64} with bandwidths (0, 1):\n 1  5  ⋅  ⋅\n ⋅  2  6  ⋅\n ⋅  ⋅  3  7\n ⋅  ⋅  ⋅  4\n\njulia> BandedMatrices.collength(A, 1)\n1\n\njulia> BandedMatrices.collength(A, 2)\n2\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.rowstart","category":"page"},{"location":"#BandedMatrices.rowstart","page":"Home","title":"BandedMatrices.rowstart","text":"rowstart(A, i::Integer)\n\nReturn the starting column index of the filled bands in the i-th row, bounded by the actual matrix size.\n\nExamples\n\njulia> A = BandedMatrix(0=>1:4, 1=>5:7)\n4×4 BandedMatrix{Int64} with bandwidths (0, 1):\n 1  5  ⋅  ⋅\n ⋅  2  6  ⋅\n ⋅  ⋅  3  7\n ⋅  ⋅  ⋅  4\n\njulia> BandedMatrices.rowstart(A, 2)\n2\n\njulia> BandedMatrices.rowstart(A, 3)\n3\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.rowstop","category":"page"},{"location":"#BandedMatrices.rowstop","page":"Home","title":"BandedMatrices.rowstop","text":"rowstop(A, i::Integer)\n\nReturn the stopping column index of the filled bands in the i-th row, bounded by the actual matrix size.\n\nExamples\n\njulia> A = BandedMatrix(0=>1:4, 1=>5:7)\n4×4 BandedMatrix{Int64} with bandwidths (0, 1):\n 1  5  ⋅  ⋅\n ⋅  2  6  ⋅\n ⋅  ⋅  3  7\n ⋅  ⋅  ⋅  4\n\njulia> BandedMatrices.rowstop(A, 2)\n3\n\njulia> BandedMatrices.rowstop(A, 4)\n4\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.rowrange","category":"page"},{"location":"#BandedMatrices.rowrange","page":"Home","title":"BandedMatrices.rowrange","text":"rowrange(A, i::Integer)\n\nReturn the range of columns in the i-th row that correspond to filled bands.\n\nExamples\n\njulia> A = BandedMatrix(0=>1:4, 1=>5:7)\n4×4 BandedMatrix{Int64} with bandwidths (0, 1):\n 1  5  ⋅  ⋅\n ⋅  2  6  ⋅\n ⋅  ⋅  3  7\n ⋅  ⋅  ⋅  4\n\njulia> rowrange(A, 1)\n1:2\n\njulia> rowrange(A, 4)\n4:4\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.rowlength","category":"page"},{"location":"#BandedMatrices.rowlength","page":"Home","title":"BandedMatrices.rowlength","text":"rowlength(A, i::Integer)\n\nReturn the number of filled bands in the i-th row.\n\nExamples\n\njulia> A = BandedMatrix(0=>1:4, 1=>5:7)\n4×4 BandedMatrix{Int64} with bandwidths (0, 1):\n 1  5  ⋅  ⋅\n ⋅  2  6  ⋅\n ⋅  ⋅  3  7\n ⋅  ⋅  ⋅  4\n\njulia> BandedMatrices.rowlength(A, 1)\n2\n\njulia> BandedMatrices.rowlength(A, 4)\n1\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.bandeddata","category":"page"},{"location":"#BandedMatrices.bandeddata","page":"Home","title":"BandedMatrices.bandeddata","text":"bandeddata(A)\n\nreturns a matrix containing the data of a banded matrix, in the BLAS format.\n\nThis is required for gbmv! support\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.BandedMatrixBand","category":"page"},{"location":"#BandedMatrices.BandedMatrixBand","page":"Home","title":"BandedMatrices.BandedMatrixBand","text":"BandedMatrixBand\n\nType to represent a view of a band of a BandedMatrix\n\nExamples\n\njulia> B = BandedMatrix(0=>1:3);\n\njulia> view(B, band(0)) isa BandedMatrices.BandedMatrixBand\ntrue\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"BandedMatrices.dataview","category":"page"},{"location":"#BandedMatrices.dataview","page":"Home","title":"BandedMatrices.dataview","text":"dataview(V::BandedMatrices.BandedMatrixBand)\n\nForward a view of a band of a BandedMatrix to the parent's data matrix.\n\nwarn: Warn\nThis will error if the indexing is out-of-bounds for the data matrix, even if it is inbounds for the parent BandedMatrix\n\nExamples\n\njulia> A = BandedMatrix(0=>1:4, 1=>5:7, -1=>8:10)\n4×4 BandedMatrix{Int64} with bandwidths (1, 1):\n 1  5   ⋅  ⋅\n 8  2   6  ⋅\n ⋅  9   3  7\n ⋅  ⋅  10  4\n\njulia> v = view(A, band(1))\n3-element view(reshape(::BandedMatrix{Int64, Matrix{Int64}, Base.OneTo{Int64}}, 16), BandSlice(Band(1), 5:5:15)) with eltype Int64:\n 5\n 6\n 7\n\njulia> BandedMatrices.dataview(v)\n3-element view(::Matrix{Int64}, 1, 2:4) with eltype Int64:\n 5\n 6\n 7\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"To loop over the nonzero elements of a BandedMatrix, you can use colrange(A, c) and rowrange(A, r).","category":"page"},{"location":"#Creating-symmetric-banded-matrices","page":"Home","title":"Creating symmetric banded matrices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Use Symmetric(::BandedMatrix) to work with symmetric banded matrices.","category":"page"},{"location":"#Banded-matrix-interface","page":"Home","title":"Banded matrix interface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Banded matrices go beyond the type BandedMatrix: one can also create matrix types that conform to the banded matrix interface, in which case many of the utility functions in this package are available. The banded matrix interface consists of the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Required methods Brief description\nbandwidths(A) Returns a tuple containing the sub-diagonal and super-diagonal bandwidth\nBandedMatrices.isbanded(A) Override to return true","category":"page"},{"location":"","page":"Home","title":"Home","text":"Optional methods Brief description\ninbands_getindex(A, k, j) Unsafe: return A[k,j], without the need to check if we are inside the bands\ninbands_setindex!(A, v, k, j) Unsafe: set A[k,j] = v, without the need to check if we are inside the bands\nBandedMatrices.MemoryLayout(A) Override to get banded lazy linear algebra, e.g. y .= Mul(A,x)\nBandedMatrices.bandeddata(A) Override to return a matrix of the entries in BLAS format. Required if MemoryLayout(A) returns BandedColumnMajor","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that certain SubArrays of BandedMatrix are also banded matrices. The banded matrix interface is implemented for such SubArrays to take advantage of this.","category":"page"},{"location":"#Eigenvalues","page":"Home","title":"Eigenvalues","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To compute efficiently a selection of eigenvalues for a BandedMatrix, you may use any Krylov method that relies on a sequence of matrix * vector operations. For instance, using the package KrylovKit:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using KrylovKit\nA = BandedMatrix(Eye(5), (1, 1))\nKrylovKit.eigsolve(A, 1, :LR)","category":"page"},{"location":"#Implementation","page":"Home","title":"Implementation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Currently, only column-major ordering is supported: a banded matrix B","category":"page"},{"location":"","page":"Home","title":"Home","text":"[ a_11 a_12  ⋅    ⋅\n  a_21 a_22 a_23  ⋅\n  a_31 a_32 a_33 a_34\n   ⋅   a_42 a_43 a_44  ]","category":"page"},{"location":"","page":"Home","title":"Home","text":"is represented as a BandedMatrix with a field B.data representing the matrix as","category":"page"},{"location":"","page":"Home","title":"Home","text":"[ ⋅     a_12   a_23    a_34\n a_11   a_22   a_33    a_44\n a_21   a_32   a_43    ⋅\n a_31   a_42   ⋅       ⋅       ]","category":"page"},{"location":"","page":"Home","title":"Home","text":"B.l gives the number of subdiagonals (2) and B.u gives the number of super-diagonals (1).  Both B.l and B.u must be non-negative at the moment.","category":"page"}]
}
